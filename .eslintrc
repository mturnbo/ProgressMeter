{
  "parserOptions": {
    "ecmaVersion": 6,
    "sourceType": "module",
    "globalReturn": true
  },
  "env": {
    "browser": true,
    "node": true,
    "amd": true,
    "mocha": true,
    "jquery": true,
    "es6": true
  },
  "globals": {
    "expect": true
  },
  "rules": {
    ////////// Possible Errors //////////

    "comma-dangle": 1,         // disallow trailing commas in object literals
    "no-cond-assign": 2,          // disallow assignment in conditional expressions
    "no-console": 1,              // disallow use of console (off by default in the node environment)
    "no-constant-condition": 0,   // disallow use of constant expressions in conditions
    "no-control-regex": 2,        // disallow control characters in regular expressions
    "no-debugger": 1,             // disallow use of debugger
    "no-dupe-keys": 2,            // disallow duplicate keys when creating object literals
    "no-empty": 1,                // disallow empty statements
    "no-empty-character-class": 2,// disallow the use of empty character classes in regular expressions
    "no-ex-assign": 2,            // disallow assigning to the exception in a catch block
    "no-extra-boolean-cast": 2,   // disallow double-negation boolean casts in a boolean context
    "no-extra-parens": 1,         // disallow unnecessary parentheses (off by default)
    "no-extra-semi": 2,           // disallow unnecessary semicolons
    "no-func-assign": 2,          // disallow overwriting functions written as function declarations
    "no-inner-declarations": 1,   // disallow function or variable declarations in nested blocks
    "no-invalid-regexp": 2,       // disallow invalid regular expression strings in the RegExp constructor
    "no-irregular-whitespace": 1, // disallow irregular whitespace outside of strings and comments
    "no-negated-in-lhs": 2,       // disallow negation of the left operand of an in expression
    "no-obj-calls": 2,            // disallow the use of object properties of the global object (Math and JSON) as functions
    "no-regex-spaces": 1,         // disallow multiple spaces in a regular expression literal
    "no-sparse-arrays": 2,        // disallow sparse arrays
    "no-unreachable": 2,          // disallow unreachable statements after a return, throw, continue, or break statement
    "use-isnan": 2,               // disallow comparisons with the value NaN
    "valid-jsdoc": 0,             // Ensure JSDoc comments are valid (off by default)
    "valid-typeof": 2,            // Ensure that the results of typeof are compared against a valid string


    ////////// Best Practices //////////

    "accessor-pairs": 2,                // Enforces getter/setter pairs in objects
    "array-callback-return": 2,         // Enforces return statements in callbacks of array's methods
    "block-scoped-var": 2,              // treat var statements as if they were block scoped (off by default)
    "complexity": [1, 4],               // specify the maximum cyclomatic complexity allowed in a program (off by default)
    "consistent-return": 0,             // require return statements to either always or never specify values
    "curly": 1,                         // specify curly brace conventions for all control statements
    "default-case": 1,                  // require default case in switch statements (off by default)
    "dot-notation": 1,                  // encourages use of dot notation whenever possible
    "eqeqeq": 2,                        // require the use of === and !==
    "guard-for-in": 1,                  // make sure for-in loops have an if statement (off by default)
    "no-alert": 2,                      // disallow the use of alert, confirm, and prompt
    "no-caller": 0,                     // disallow use of arguments.caller or arguments.callee
    "no-div-regex": 1,                  // disallow division operators explicitly at beginning of regular expression (off by default)
    "no-else-return": 1,                // disallow else after a return in an if (off by default)
    "no-empty-function": 0,             // disallow use of empty functions
    "no-empty-pattern": 2,              // disallow use of empty destructuring patterns
    "no-eq-null": 2,                    // disallow comparisons to null without a type-checking operator (off by default)
    "no-eval": 2,                       // disallow use of eval()
    "no-extend-native": 2,              // disallow adding to native types
    "no-extra-bind": 1,                 // disallow unnecessary function binding
    "no-extra-label": 1,                // disallow unnecessary labels
    "no-fallthrough": 1,                // disallow fallthrough of case statements
    "no-floating-decimal": 1,           // disallow the use of leading or trailing decimal points in numeric literals (off by default)
    "no-implicit-coercion": [1, {
      "boolean": true,
      "number": true,
      "string": true,
      "allow": ["!!"]
    }],                                 // disallow the type conversions with shorter notations
    "no-implicit-globals": 2,             // disallow var and named functions in global scope
    "no-implied-eval": 2,               // disallow use of eval()-like methods
    "no-invalid-this": 0,               // disallow this keywords outside of classes or class-like objects
    "no-iterator": 2,                   // disallow usage of __iterator__ property
    "no-labels": 1,                     // disallow use of labeled statements
    "no-lone-blocks": 2,                // disallow unnecessary nested blocks
    "no-loop-func": 1,                  // disallow creation of functions within loops
    "no-magic-numbers": 0,              // disallow the use of magic numbers
    "no-multi-spaces": 1,               // disallow use of multiple spaces
    "no-multi-str": 0,                  // disallow use of multiline strings
    "no-native-reassign": 2,            // disallow reassignments of native objects
    "no-new": 1,                        // disallow use of new operator when not part of the assignment or comparison
    "no-new-func": 2,                   // disallow use of new operator for Function object
    "no-new-wrappers": 2,               // disallows creating new instances of String, Number, and Boolean
    "no-octal": 2,                      // disallow use of octal literals
    "no-octal-escape": 1,               // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
    "no-param-reassign": 0,             // disallow reassignment of function parameters
    "no-process-env": 1,                // disallow use of process.env (off by default)
    "no-proto": 2,                      // disallow usage of __proto__ property
    "no-redeclare": 2,                  // disallow declaring the same variable more then once
    "no-return-assign": 0,              // disallow use of assignment in return statement
    "no-script-url": 2,                 // disallow use of javascript: urls.
    "no-self-assign": 2,                // disallow assignments where both sides are exactly the same
    "no-self-compare": 1,               // disallow comparisons where both sides are exactly the same (off by default)
    "no-sequences": 0,                  // disallow use of comma operator
    "no-throw-literal": 1,              // restrict what can be thrown as an exception
    "no-unmodified-loop-condition": 2,  // disallow unmodified conditions of loops
    "no-unused-expressions": 0,         // disallow usage of expressions in statement position
    "no-unused-labels": 1,              // disallow unused labels
    "no-useless-call": 1,               // disallow unnecessary .call() and .apply()
    "no-useless-concat": 1,             // disallow unnecessary concatenation of literals or template literals
    "no-void": 1,                       // disallow use of void operator (off by default)
    "no-warning-comments": 0,           // disallow usage of configurable warning terms in comments, e.g. TODO or FIXME (off by default)
    "no-with": 1,                       // disallow use of the with statement
    "radix": 0,                         // require use of the second argument for parseInt() (off by default)
    "vars-on-top": 1,                   // requires to declare all vars on top of their containing scope (off by default)
    "wrap-iife": [1, "any"],            // require immediate function invocation to be wrapped in parentheses (off by default)
    "yoda": 1,                          // require or disallow Yoda conditions


    ////////// Strict Mode //////////
    "strict": [1, "safe"],      // controls location of Use Strict Directives


    ////////// Variables //////////

    "init-declarations": 0,           // enforce or disallow variable initializations at definition
    "no-catch-shadow": 1,             // disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
    "no-delete-var": 1,               // disallow deletion of variables
    "no-label-var": 1,                // disallow labels that share a name with a variable
    "no-shadow": 1,                   // disallow declaration of variables already declared in the outer scope
    "no-shadow-restricted-names": 1,  // disallow shadowing of names such as arguments
    "no-undef": 2,                    // disallow use of undeclared variables unless mentioned in a /*global */ block
    "no-undef-init": 1,               // disallow use of undefined when initializing variables
    "no-undefined": 1,                // disallow use of undefined variable (off by default)
    "no-unused-vars": 1,              // disallow declaration of variables that are not used in the code
    "no-use-before-define": 1,        // disallow use of variables before they are defined


    ////////// Node.js //////////

    "callback-return": 1,       // enforce return after a callback
    "global-require": 1,        // enforce require() on top-level module scope
    "handle-callback-err": 1,   // enforces error handling in callbacks (off by default) (on by default in the node environment)
    "no-mixed-requires": 1,     // disallow mixing regular variable and require declarations (off by default) (on by default in the node environment)
    "no-new-require": 1,        // disallow use of new operator with the require function (off by default) (on by default in the node environment)
    "no-path-concat": 1,        // disallow string concatenation with __dirname and __filename (off by default) (on by default in the node environment)
    "no-process-exit": 0,       // disallow process.exit() (on by default in the node environment)
    "no-restricted-imports": 0, // restrict usage of specified node imports
    "no-restricted-modules": 0, // restrict usage of specified node modules (off by default)
    "no-sync": 0,               // disallow use of synchronous methods (off by default)


    ////////// Stylistic Issues //////////

    "array-bracket-spacing": 1,                 // enforce spacing inside array brackets
    "block-spacing": [1, "always"],             // disallow or enforce spaces inside of single line blocks
    "brace-style": [1, "1tbs", { "allowSingleLine": true }],                                         // enforce one true brace style (off by default)
    "camelcase": [1, {
      "properties": "always"
    }],                                         // require camel case names
    "comma-spacing": [1, {
      "before": false,
      "after": true
    }],                                         // enforce spacing before and after comma
    "comma-style": [1, "last"],                 // enforce one true comma style (off by default)
    "computed-property-spacing": [1, "never"], // require or disallow padding inside computed properties
    "consistent-this": [1, "_this"],            // enforces consistent naming when capturing the current execution context (off by default)
    "eol-last": 1,                              // enforce newline at the end of file, with no multiple empty lines
    "func-names": 0,                            // require function expressions to have a name (off by default)
    "func-style": 0,                            // enforces use of function declarations or expressions (off by default)
    "id-blacklist": 0,                          // blacklist certain identifiers to prevent them being used
    "id-length": 0,                             // this option enforces minimum and maximum identifier lengths (variable names, property names etc.)
    "id-match": 0,                              // require identifiers to match the provided regular expression
    "indent": [1, 2, {"SwitchCase" : 1}],                          // specify tab or space width for your code
    "jsx-quotes": 0,                            // specify whether double or single quotes should be used in JSX attributes
    "key-spacing": [1, {
      "beforeColon": false,
      "afterColon": true
    }],                                         // enforces spacing between keys and values in object literal properties
    "keyword-spacing": [1, {
      "before": true,
      "after": true
    }],                                         // enforce spacing before and after keywords
    "linebreak-style": 0,                       // disallow mixed 'LF' and 'CRLF' as linebreaks
    "lines-around-comment": 0,                  // enforce empty lines around comments
    "max-depth": [1, 2],                        // specify the maximum depth that blocks can be nested
    "max-len": 0,                               // specify the maximum length of a line in your program
    "max-nested-callbacks": [1, 3],             // specify the maximum depth callbacks can be nested (off by default)
    "max-params": 0,                            // limits the number of parameters that can be used in the function declaration
    "max-statements": 0,                        // specify the maximum number of statement allowed in a function
    "new-cap": [1, {
      "newIsCap": true,
      "capIsNew": false
    }],                                         // require a capital letter for constructors
    "new-parens": 1,                            // disallow the omission of parentheses when invoking a constructor with no arguments
    "newline-after-var": 0,                     // require or disallow an empty newline after variable declarations
    "newline-per-chained-call": 0,              // enforce newline after each call when chaining the calls
    "no-array-constructor": 1,                  // disallow use of the Array constructor
    "no-bitwise": 0,                            // disallow use of bitwise operators
    "no-continue": 0,                           // disallow use of the continue statement
    "no-inline-comments": 1,                    // disallow comments inline after code (off by default)
    "no-lonely-if": 1,                          // disallow if as the only statement in an else block (off by default)
    "no-mixed-spaces-and-tabs": 1,              // disallow mixed spaces and tabs for indentation
    "no-multiple-empty-lines": [1, {"max": 2}], // disallow multiple empty lines (off by default)
    "no-negated-condition": 0,                  // disallow negated conditions
    "no-nested-ternary": 1,                     // disallow nested ternary expressions (off by default)
    "no-new-object": 1,                         // disallow use of the Object constructor
    "no-plusplus": 1,                           // disallow use of unary operators, ++ and -- (off by default)
    "no-restricted-syntax": 0,                  // disallow use of certain syntax in code
    "no-space-before-semi": 0,                  // disallow space before semicolon
    "no-spaced-func": 1,                        // disallow space between function identifier and application
    "no-ternary": 0,                            // disallow the use of ternary operators (off by default)
    "no-trailing-spaces": 1,                    // disallow trailing whitespace at the end of lines
    "no-underscore-dangle": 0,                  // disallow dangling underscores in identifiers
    "no-unneeded-ternary": 1,                   // disallow the use of ternary operators when a simpler alternative exists
    "no-whitespace-before-property": 1,         // disallow whitespace before properties
    "object-curly-spacing": 1,                  // require or disallow padding inside curly braces
    "one-var": [1, "never"],                    // allow just one var statement per function (off by default)
    "one-var-declaration-per-line": 0,          // require or disallow an newline around variable declarations
    "operator-assignment": 0,                   // require assignment operator shorthand where possible or prohibit it entirely (off by default)
    "operator-linebreak": [1, "after"],         // enforce operators to be placed before or after line breaks
    "padded-blocks": [1, "never"],              // enforce padding within blocks (off by default)
    "quote-props": [1, "as-needed"],            // require quotes around object literal property names (off by default)
    "quotes": [1, "single"],                    // specify whether double or single quotes should be used
    "require-jsdoc": 0,                         // Require JSDoc comment
    "semi": [1, "always"],                      // require or disallow use of semicolons instead of ASI
    "semi-spacing": [1, {
      "before": false,
      "after": true
    }],                                         // enforce spacing before and after semicolons
    "sort-imports": 0,                          // sort import declarations within module
    "sort-vars": 0,                             // sort variables within the same declaration block (off by default)
    "space-before-blocks": [1, "always"],       // require or disallow space before blocks (off by default)
    "space-before-function-paren": [1, {
      "anonymous": "always",
      "named": "never"
    }],                                         // require or disallow space before function opening parenthesis
    "space-in-parens": [1, "never"],            // require or disallow spaces inside parentheses (off by default)
    "space-infix-ops": [2, {
      "int32Hint": false
    }],                                         // require spaces around operators
    "space-unary-ops": [1, {
      "words": true,
      "nonwords": false
    }],                                         // Require or disallow spaces before/after unary operators
    "spaced-comment": [1, "always"],            // require or disallow a space immediately following the // or /* in a comment
    "wrap-regex": 0,                            // require regex literals to be wrapped in parentheses (off by default)


    ////////// ECMAScript 6 //////////

    "arrow-body-style": [1, "as-needed"],       // require braces in arrow function body
    "arrow-parens": 1,                          // require parens in arrow function arguments
    "arrow-spacing": 1,                         // require space before/after arrow function's arrow
    "constructor-super": 1,                     // verify calls of super() in constructors
    "generator-star-spacing": 0,                // enforce spacing around the * in generator functions
    "no-class-assign": 1,                       // disallow modifying variables of class declarations
    "no-confusing-arrow": 1,                    // disallow arrow functions where they could be confused with comparisons
    "no-const-assign": 2,                       // disallow modifying variables that are declared using const
    "no-dupe-class-members": 1,                 // disallow duplicate name in class members
    "no-new-symbol": 1,                         // disallow use of the new operator with the Symbol object
    "no-this-before-super": 1,                  // disallow use of this/super before calling super() in constructors
    "no-useless-constructor": 1,                // disallow unnecessary constructor
    "no-var": 0,                                // require let or const instead of var (off by default)
    "object-shorthand": [1, "methods"],         // require method and property shorthand syntax for object literals
    "prefer-arrow-callback": 0,                 // suggest using arrow functions as callbacks
    "prefer-const": 0,                          // suggest using const declaration for variables that are never modified after declared
    "prefer-reflect": 0,                        // suggest using Reflect methods where applicable
    "prefer-rest-params": 0,                    // suggest using the rest parameters instead of arguments
    "prefer-spread": 0,                         // suggest using the spread operator instead of .apply()
    "prefer-template": 0,                       // suggest using template literals instead of strings concatenation
    "require-yield": 1,                         // disallow generator functions that do not have yield
    "template-curly-spacing": 0,                // enforce spacing around embedded expressions of template strings
    "yield-star-spacing": 0                     // enforce spacing around the * in yield* expressions
  }
}